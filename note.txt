http://www.51nb.com/xinwen/benzhanshiye/2016-06-21/76965_3.html
http://costfine.blog.163.com/blog/static/213660015201211743645748/
**
http://doc.ulua.org/article/ulua/uluadaimazhongruhenewyigecduixiang20151109185630.html

**
http://www.webtag123.com/android/41331.html
http://drops.wooyun.org/tips/6840
http://www.alanzucconi.com/2016/01/27/arrays-shaders-heatmaps-in-unity3d/

**
http://www.somasim.com/blog/2015/04/csharp-memory-and-performance-tips-for-unity/
http://www.somasim.com/blog/2015/08/c-performance-tips-for-unity-part-2-structs-and-enums/

**
Recommended reading order:
lmathlib.c, lstrlib.c: get familiar with the external C API. Don't bother with the pattern matcher though. Just the easy functions.
lapi.c: Check how the API is implemented internally. Only skim this to get a feeling for the code. Cross-reference to lua.h and luaconf.h as needed.
lobject.h: tagged values and object representation. skim through this first. you'll want to keep a window with this file open all the time.
lstate.h: state objects. ditto.
lopcodes.h: bytecode instruction format and opcode definitions. easy.
lvm.c: scroll down to luaV_execute, the main interpreter loop. see how all of the instructions are implemented. skip the details for now. reread later.
ldo.c: calls, stacks, exceptions, coroutines. tough read.
lstring.c: string interning. cute, huh?
ltable.c: hash tables and arrays. tricky code.
ltm.c: metamethod handling, reread all of lvm.c now.
You may want to reread lapi.c now.
ldebug.c: surprise waiting for you. abstract interpretation is used to find object names for tracebacks. does bytecode verification, too.
lparser.c, lcode.c: recursive descent parser, targetting a register-based VM. start from chunk() and work your way through. read the expression parser and the code generator parts last.
lgc.c: incremental garbage collector. take your time.
Read all the other files as you see references to them. Don't let your stack get too deep though.
If you're done before X-Mas and understood all of it, you're good. The information density of the code is rather high.

**
http://www.codingart.info/snapshot-detect-Lua-memoryleak.html
http://pan.baidu.com/s/1gd1Wyx9#path=%252Fulua_src
http://www.xuanyusong.com/archives/3571
http://www.znzs.com/topic/Hui-Bao-She-Hui-Shi-Jian-Dao--Android-wearZhu-Liu-Ban-Ben-Hui-Zong#txtContent
http://bbs.pediy.com/showthread.php?t=191649
http://www.52pojie.cn/thread-401702-1-1.html
http://csftech.logdown.com/posts/452269-android-unity-encryption
http://www.xionggf.com/articles/graphic/u3d/an_introduction_to_il2cpp_internals_01.html

**
http://blog.csdn.net/candycat1992/article/details/41605257
http://blog.csdn.net/candycat1992/article/details/47777937
http://www.cnblogs.com/wonderKK/p/4266485.html

**
http://coolshell.cn/articles/11564.html
http://coolshell.cn/articles/11609.html

**
C:\Users\wangjian\AppData\Local\Unity\Editor
adb forward tcp:54999 localabstract:Unity-com.GF.dashenwang
adb forward tcp:54999 localabstract:Unity-com.test.grass

** lockstep
http://www.gamasutra.com/view/feature/3094/
http://gafferongames.com/networked-physics/deterministic-lockstep/
http://clintonbrennan.com/2013/12/lockstep-implementation-in-unity3d/
http://clintonbrennan.com/2014/04/lockstep-implementation-in-unity3d-part-2/
http://clintonbrennan.com/2014/01/simple-2d-deterministic-physics-simulation/
https://github.com/ownself/LockStepModule
https://github.com/InkhornGames/lockstep.io
http://stackoverflow.com/questions/605124/fixed-point-math-in-c/616015#616015